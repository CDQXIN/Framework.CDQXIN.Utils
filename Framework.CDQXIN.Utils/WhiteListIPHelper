public static class WhiteListIPHelper
    {
        public static bool IsWhiteListInternalIP(this string clientIpAddress)
        {
            var odIPWhiteListConfiguration =FoundationContext.InternalIPList;
            if (string.IsNullOrWhiteSpace(odIPWhiteListConfiguration))
            {
                // default: not white list IP
                return false;
            }
            var ipWhiteListFlag = false;
            string[] odIPWhiteList = odIPWhiteListConfiguration.Split(',');
            foreach (string odIP in odIPWhiteList)
            {
                string[] ipAddressWithSubnet = odIP.Split(';');
                //No Subnet mask available
                if (ipAddressWithSubnet.Length == 1)
                {
                    if (odIP.Equals(clientIpAddress))
                    {
                        ipWhiteListFlag = true;
                        break;
                    }
                }
                else
                {
                    if (IsInSameSubnet(ipAddressWithSubnet[0], clientIpAddress, ipAddressWithSubnet[1]))
                    {
                        ipWhiteListFlag = true;
                        break;
                    }
                }
            }
            return ipWhiteListFlag;
        }

        private static bool IsInSameSubnet(string ipAddress, string clientIP, string subnetmask)
        {
            try
            {
                var allowedIPAddress = IPAddress.Parse(ipAddress);
                var clientIPAddress = IPAddress.Parse(clientIP);
                var mask = IPAddress.Parse(subnetmask);

                IPAddress allowedIPAddressNetwork = GetNetworkAddress(allowedIPAddress, mask);
                IPAddress clientIPAddressNetwork = GetNetworkAddress(clientIPAddress, mask);

                return allowedIPAddressNetwork.Equals(clientIPAddressNetwork);
            }
            catch (Exception ex)
            {
                SwitchConstants.FoundationNLogger.Warn($"[{{\"Location\":Gdot.Foundation.Core.Extension.WhiteListIPHelper.IsInSameSubnet,\"Message\":\"Error details: {ex.Message} + {ex.StackTrace}\"}}]");
                return false;
            }
        }

        private static IPAddress GetNetworkAddress(IPAddress address, IPAddress subnetMask)
        {
            byte[] ipAdressBytes = address.GetAddressBytes();
            byte[] subnetMaskBytes = subnetMask.GetAddressBytes();

            if (ipAdressBytes.Length != subnetMaskBytes.Length)
                throw new ArgumentException("Lengths of IP address and subnet mask do not match.");

            byte[] networkAddress = new byte[ipAdressBytes.Length];
            for (int i = 0; i < networkAddress.Length; i++)
            {
                networkAddress[i] = (byte)(ipAdressBytes[i] & (subnetMaskBytes[i]));
            }
            return new IPAddress(networkAddress);
        }
    }
    
    public class AllowFlaw
    {
    private bool GetAllowFlow(string ip,string buyersRemorsTRIGGERName)
        {
            bool allowB = true;

            var bsTRIGGERStr ="";
            if (bsTRIGGERStr.GetBoolean() && !IsWhiteListIP(ip))
            {
                allowB = false;
            }

            return allowB;
        }
    }
